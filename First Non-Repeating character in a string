Problem Statement
Given a string, find the first character that does not repeat. If no such character exists, return a special character or message indicating so.

Example
Input: "swiss"
Output: 'w'
Approaches
Brute Force Approach
Optimized Approach Using Hashing

#include <iostream>
#include <string>
#include <unordered_map>

char firstNonRepeatingChar(const std::string& str) {
    std::unordered_map<char, int> charCount;
    
    // Count frequency of each character
    for (char ch : str) {
        charCount[ch]++;
    }
    
    // Find the first character with a count of 1
    for (char ch : str) {
        if (charCount[ch] == 1) {
            return ch;
        }
    }
    
    return '\0'; // No non-repeating character found
}

int main() {
    std::string str = "swiss";
    char result = firstNonRepeatingChar(str);
    if (result != '\0') {
        std::cout << "First non-repeating character: " << result << std::endl;
    } else {
        std::cout << "No non-repeating character found" << std::endl;
    }
    return 0;
}

Time complexity = O(N)
Space Complexity = O(N)
